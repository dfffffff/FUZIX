Memory map. All off PCMCIA root, 16K arbitrary banks

No CP/M emulation (due to NMI)

0x0000	Vectors
0x0100  Application
0xEFFF  Application end
0xF000  Common, uarea
0xFFFF	Common top  (including video helpers)

Overlaid with

0x0000	Vectors
0x0100  Bootstrap code
0x0213	Kernel
0xBFFF  End of kernel space

Overlaid at times with
0x4000-0x7FFF video bank (vram used by ROM OS)

NC200 is similar but CP/M should be possible

On the PCMCIA card the layout looks like

0,1,2		Bootblocks, state, kernel
3,4,5		Running kernel
6		Initial common (boot and inherited by init)
8-19		User pages (12 * 16K)
20-63		Filesystem


To add a filesystem to the card image mycard.img do

mkfs myfs 64 1408
ucp

then

dd if=myfs of=mycard.img bs=16384 seek=20 conv=notrunc


To boot from NC100emu use nc100emu.s. Compile it with sdas80 and use the
resulting nc100.cim as the bootscript for the emulator.

TODO

- driver for the power status bits
- lots of testing
- control doesn't seem to work ???
- pick codes for the arrow keys
- NMI/resume
- NC200 ?
- this platform would really benefit from vfork 

